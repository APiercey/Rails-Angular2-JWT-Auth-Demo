var node_1 = require('./platform/node');
var document_1 = require('./platform/document');
var common_dom_1 = require('angular2/platform/common_dom');
var stringifyElement_1 = require('./stringifyElement');
var ng_preboot_1 = require('./ng_preboot');
var lang_1 = require('angular2/src/facade/lang');
var shared_styles_host_1 = require('angular2/src/platform/dom/shared_styles_host');
var core_1 = require('angular2/core');
var router_1 = require('angular2/router');
function addPrebootHtml(html, prebootConfig) {
    if (prebootConfig === void 0) { prebootConfig = {}; }
    if (typeof prebootConfig === 'boolean' && prebootConfig === false) {
        return html;
    }
    var config = ng_preboot_1.prebootConfigDefault(prebootConfig);
    return ng_preboot_1.getBrowserCode(config).then(function (code) { return html + ng_preboot_1.createPrebootHTML(code, config); });
}
function waitRouter(appRef) {
    var injector = appRef.injector;
    var router = injector.getOptional(router_1.Router);
    return Promise.resolve(router && router._currentNavigation)
        .then(function () { return new Promise(function (resolve) { return setTimeout(function () { return resolve(appRef); }); }); });
}
function renderDocument(documentHtml, componentType, serverProviders) {
    return node_1.bootstrap(componentType, serverProviders.concat([
        new core_1.Provider(common_dom_1.DOCUMENT, { useValue: document_1.parseDocument(documentHtml) })
    ]))
        .then(waitRouter)
        .then(function (appRef) {
        var injector = appRef.injector;
        var document = injector.get(common_dom_1.DOCUMENT);
        return document_1.serializeDocument(document);
    });
}
exports.renderDocument = renderDocument;
function renderDocumentWithPreboot(documentHtml, componentType, serverProviders, prebootConfig) {
    if (prebootConfig === void 0) { prebootConfig = {}; }
    return renderDocument(documentHtml, componentType, serverProviders)
        .then(function (html) { return addPrebootHtml(html, prebootConfig); });
}
exports.renderDocumentWithPreboot = renderDocumentWithPreboot;
exports.serverDirectiveResolver = new core_1.DirectiveResolver();
function selectorResolver(componentType) {
    return exports.serverDirectiveResolver.resolve(componentType).selector;
}
exports.selectorResolver = selectorResolver;
function serializeApplication(element, styles, cache) {
    // serialize all style hosts
    var serializedStyleHosts = styles.length >= 1 ? '<style>' + styles.join('\n') + '</style>' : '';
    // serialize Top Level Component
    var serializedCmp = stringifyElement_1.stringifyElement(element);
    // serialize App Data
    var serializedData = lang_1.isBlank(cache) ? '' : '' +
        '<script>' +
        'window.' + 'ngPreloadCache' + ' = ' + JSON.stringify(cache, null, 2) +
        '</script>' +
        '';
    return serializedStyleHosts + serializedCmp + serializedData;
}
exports.serializeApplication = serializeApplication;
function appRefSyncRender(appRef) {
    // grab parse5 html element
    var element = appRef.location.nativeElement;
    // TODO: we need a better way to manage the style host for server/client
    var sharedStylesHost = appRef.injector.get(shared_styles_host_1.SharedStylesHost);
    var styles = sharedStylesHost.getAllStyles();
    var serializedApp = serializeApplication(element, styles);
    return serializedApp;
}
exports.appRefSyncRender = appRefSyncRender;
function renderToString(AppComponent, serverProviders) {
    return node_1.bootstrap(AppComponent, serverProviders)
        .then(waitRouter)
        .then(function (appRef) {
        var html = appRefSyncRender(appRef);
        appRef.dispose();
        return html;
    });
}
exports.renderToString = renderToString;
function renderToStringWithPreboot(AppComponent, serverProviders, prebootConfig) {
    if (prebootConfig === void 0) { prebootConfig = {}; }
    return renderToString(AppComponent, serverProviders).then(function (html) { return addPrebootHtml(html, prebootConfig); });
}
exports.renderToStringWithPreboot = renderToStringWithPreboot;
//# sourceMappingURL=render.js.map
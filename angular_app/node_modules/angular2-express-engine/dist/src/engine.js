var fs = require('fs');
var angular2_universal_preview_1 = require('angular2-universal-preview');
var prebootScript = "\n  <preboot>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/preboot/preboot.css\">\n    <script src=\"/preboot/preboot.js\"></script>\n    <script>preboot.start()</script>\n  </preboot>\n";
var angularScript = "\n  <!-- Browser polyfills -->\n  <script src=\"/node_modules/es6-shim/es6-shim.min.js\"></script>\n  <script src=\"/node_modules/systemjs/dist/system-polyfills.js\"></script>\n  <script src=\"/node_modules/angular2/bundles/angular2-polyfills.min.js\"></script>\n  <!-- SystemJS -->\n  <script src=\"/node_modules/systemjs/dist/system.js\"></script>\n  <!-- Angular2: Bundle -->\n  <script src=\"/node_modules/rxjs/bundles/Rx.js\"></script>\n  <script src=\"/node_modules/angular2/bundles/angular2.dev.js\"></script>\n  <script src=\"/node_modules/angular2/bundles/router.dev.js\"></script>\n  <script src=\"/node_modules/angular2/bundles/http.dev.js\"></script>\n  <script type=\"text/javascript\">\n    System.config({\n      \"baseURL\": \"/\",\n      \"defaultJSExtensions\": true\n    });\n  </script>\n";
var bootstrapButton = "\n  <div id=\"bootstrapButton\">\n    <style>\n     #bootstrapButton {\n      z-index:999999999;\n      position: absolute;\n      background-color: rgb(255, 255, 255);\n      padding: 0.5em;\n      border-radius: 3px;\n      border: 1px solid rgb(207, 206, 206);\n     }\n    </style>\n    <button onclick=\"bootstrap()\">\n      Bootstrap Angular2 Client\n    </button>\n  </div>\n";
var bootstrapApp = "\n  <script>\n    setTimeout(function() {\n      bootstrap();\n    });\n  </script>\n";
function bootstrapFunction(appUrl) {
    return "\n  <script>\n    function bootstrap() {\n      if (this.bootstraped) return;\n      this.bootstraped = true;\n      System.import(\"" + appUrl + "\")\n        .then(function(module) {\n          return module.main();\n        })\n        .then(function() {\n          preboot.complete();\n          var $bootstrapButton = document.getElementById(\"bootstrapButton\");\n          if ($bootstrapButton) { $bootstrapButton.remove(); }\n        });\n    }\n  </script>\n";
}
;
// TODO: find better ways to configure the App initial state
// to pay off this technical debt
// currently checking for explicit values
function buildClientScripts(html, options) {
    return html
        .replace(angular2_universal_preview_1.selectorRegExpFactory('preboot'), ((options.preboot === false) ? '' : prebootScript))
        .replace(angular2_universal_preview_1.selectorRegExpFactory('angular'), ((options.angular === false) ? '' : angularScript))
        .replace(angular2_universal_preview_1.selectorRegExpFactory('bootstrap'), ((options.bootstrap === false) ? (bootstrapButton +
        bootstrapFunction(options.componentUrl)) : (((options.client === undefined || options.server === undefined) ?
        '' : (options.client === false) ? '' : bootstrapButton) +
        bootstrapFunction(options.componentUrl) +
        ((options.client === false) ? '' : bootstrapApp))));
}
function ng2engine(filePath, options, done) {
    // defaults
    options = options || {};
    options.providers = options.providers || undefined;
    options.preboot = options.preboot || undefined;
    // read file on disk
    try {
        fs.readFile(filePath, function (err, content) {
            if (err) {
                return done(err);
            }
            // convert to string
            var clientHtml = content.toString();
            // TODO: better build scripts abstraction
            if (options.server === false && options.client === false) {
                return done(null, clientHtml);
            }
            if (options.server === false && options.client !== false) {
                return done(null, buildClientScripts(clientHtml, options));
            }
            // bootstrap and render component to string
            var renderPromise = angular2_universal_preview_1.renderToString;
            var args = [options.App, options.providers];
            if (options.preboot) {
                renderPromise = angular2_universal_preview_1.renderToStringWithPreboot;
                args.push(options.preboot);
            }
            renderPromise.apply(void 0, args)
                .then(function (serializedCmp) {
                var selector = angular2_universal_preview_1.selectorResolver(options.App);
                // selector replacer explained here
                // https://gist.github.com/gdi2290/c74afd9898d2279fef9f
                // replace our component with serialized version
                var rendered = clientHtml.replace(
                // <selector></selector>
                angular2_universal_preview_1.selectorRegExpFactory(selector), 
                // <selector>{{ serializedCmp }}</selector>
                serializedCmp);
                done(null, buildClientScripts(rendered, options));
            })
                .catch(function (e) {
                console.log(e.stack);
                // if server fail then return client html
                done(null, buildClientScripts(clientHtml, options));
            });
        });
    }
    catch (e) {
        done(e);
    }
}
exports.ng2engine = ng2engine;
;
function simpleReplace(filePath, options, done) {
    // defaults
    options = options || {};
    // read file on disk
    try {
        fs.readFile(filePath, function (err, content) {
            if (err) {
                return done(err);
            }
            // convert to string
            var clientHtml = content.toString();
            // TODO: better build scripts abstraction
            if (options.server === false && options.client === false) {
                return done(null, clientHtml);
            }
            if (options.server === false && options.client !== false) {
                return done(null, buildClientScripts(clientHtml, options));
            }
            var rendered = clientHtml.replace(
            // <selector></selector>
            angular2_universal_preview_1.selectorRegExpFactory(options.selector), 
            // <selector>{{ serializedCmp }}</selector>
            options.serializedCmp);
            done(null, buildClientScripts(rendered, options));
        });
    }
    catch (e) {
        done(e);
    }
}
exports.simpleReplace = simpleReplace;
//# sourceMappingURL=engine.js.map